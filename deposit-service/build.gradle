plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'io.freefair.lombok' version '8.4'
    id 'jacoco'
}

group = 'ru.clevertec.banking.deposit'


java {
    sourceCompatibility = JavaVersion.VERSION_17
}

ext {
    datafakerVersion = '2.1.0'
    springSecurityTestVersion = '6.2.1'
}


dependencies {
    implementation 'ru.clevertec.banking:global-exception-starter:1.0.0'
    implementation 'ru.clevertec.banking:logging-starter:1.0.0'
    implementation 'ru.clevertec.banking:cache-starter:1.0.0'
    implementation 'ru.clevertec.banking:security-starter:1.0.0'

    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'

    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${openapiStarterVersion}"


    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'

    implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"

    implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
    implementation 'org.liquibase:liquibase-core'
    implementation "net.lbruun.springboot:preliquibase-spring-boot-starter:${preLiquibaseStarterVersion}"
    runtimeOnly 'org.postgresql:postgresql'

    implementation "org.springframework.boot:spring-boot-starter-amqp:${springBootVersion}"


    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"


    testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    testImplementation "org.springframework.boot:spring-boot-testcontainers:${springBootVersion}"

    testImplementation "org.testcontainers:postgresql:${testContainersVersion}"
    testImplementation "org.testcontainers:testcontainers:${testContainersVersion}"
    testImplementation "org.testcontainers:junit-jupiter:${testContainersVersion}"
    testImplementation "org.testcontainers:rabbitmq:${testContainersVersion}"

    testImplementation "org.springframework.security:spring-security-test:${springSecurityTestVersion}"


    testImplementation "org.wiremock:wiremock-standalone:${wiremockVersion}"


    testImplementation "net.datafaker:datafaker:${datafakerVersion}"

}

compileJava {
    options.annotationProcessorPath = configurations.annotationProcessor
    options.compilerArgs += [
            '-Amapstruct.defaultComponentModel=spring',
            '-Amapstruct.unmappedTargetPolicy=IGNORE'
    ]
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
    }
}
jacocoTestReport{

    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "ru/clevertec/banking/**/mapper/*",
            ])
        }))
    }

}


test {
    useJUnitPlatform()
    finalizedBy(jacocoTestReport)
}

